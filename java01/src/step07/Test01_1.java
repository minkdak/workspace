/* 클래스 로딩
 * => 클래스를 사용하는 시점에 
 *    해당 클래스의 바이트코드가 들어있는 파일을 찾아
 *    메모리로 로딩하는 것을 말한다.
 * => 클래스의 바이트 코드는 "Method Area" 영역에 로딩된다.
 * => JVM이 관리하는 주요 메모리 영역
 *    1) Stack
 *      메서드가 호출될 때 마다 그 메서드의 로컬 변수를 준비하는 메모리 영역
 *      메서드 호출이 끝나면 그 메서드를 위해 준비했던 모든 변수가 스택에서 제거된다.
 *    2) Heap
 *       new 명령을 통해 생성된 인스턴스 변수가 놓이는 메모리 영역
 *       가비지 컬렉터에 의해 관리된다.
 *       가비지 컬렉터가 메모리를 해제하기 전까지는 계속 유지된다.
 *    3) Method Area
 *       클래스의 코드가 로딩되는 메모리 영역이다.
 *       한 번 클래스가 로딩되면 JVM이 종료될 때까지 유지된다.
 *       메서드 코드가 이 영역에 존재한다.
 *       
 * => JVM이 종료되면 JVM이 사용한 모든 메모리는 OS에 자동으로 반납된다.
 *    (OS의 메모리 관리 정책에 따라 프로세스가 종료되면 그 프로세스가 사용한
 *    모든 메모리를 강제로 해제시킨다.) ((반납되는건 당연한거다~)) 
 */
package step07;

public class Test01_1 {
  // 이 메서드가 호출되려면,
  // 먼저 이 메서드를 갖고 있는 클래스 파일이 메모리에 로딩되어야 한다.
  // 그래서 클래스를 실행할 때 *.class 파일을 찾는것이다.
  public static void main(String[] args) {
    System.out.println("Hello!");
  }

}
