/* 증가/감소 연산자 - 전위 및 후위 연산자의 차이점
 */
package step03;

public class test02_2 {

  public static void main(String[] args) {
    //1) 전위(pre-ix) 연산자
    //=> 변수의 값을 먼저 증가시킨 다음에, 그 자리에 현재 변수의 값을 놓는다.
    int x = 0;
    int i = 10;
    
    
    x = ++i; // ++를 먼저 i 에 실행한다. i는 11이 되고 따라서 그값인 11이 x에 할당된다.
    /* 실행순서
     *  => i = i + 1 : 11
     *  => x = 11
     */
    System.out.printf("i = %d, x = %d\n", i, x); // %s: 문자열 
    
    --i; // i = i - 1 명령과 같다.
    System.out.println(i);
    
    //2) 후위(post-fix) 연산자
    //=> 현재 자리에 변수의 값을 먼저 놓고, 변수의 값을 증가 시킨다.
    i = 10;
    
    x = i++; // i라는 변수를 놓는 것이 아니라 그 값을 놓는다. 즉 10을 놓는 것이다.
             // rvalue에는 10이 놓이고 그다음 ++ 가 되는 것이기 때문에 i = 10이라고 
             // 정의한 자리에 11이되고 10의 값이 x에 저장된다.
    /* 실행순서
     * => x = 10 : 주의! i 값을 그 자리에 놓은 상태이다. 할당 연산자를 실행하지는 않는다.
     *             왜? 할당 연산자는 오른쪽 편(r-value)을 모두 실행한 다음에 
     *             마지막으로 실행하기 때문이다.
     * => i = i + 1
     * => x <== 10 : 오른쪽 편(r-value)의 계산이 모두 완료되었기 때문에
     *               아까전에 실행하지 않은 할당 연산을 지금 실행한다.
     *             
     */
     System.out.printf("i = %d, x = %d\n", i, x);
    
  }
}
