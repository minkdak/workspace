/* 인터페이스 4
 * => 인터페이스는 다중 상속이 가능하다.
 * => 어차피 구현되지 않은 메서드이기 때문이다.
 */

package step21.ex8;

public interface D extends B, C {
  // B에도 m5()가 있고, C에도 m5()있다.
  // 그러나 어차피 구현한 메서드가 아니기 때문에 둘 중 어느것을 가져와도 된다.
  // 그래서 인터페이스는 다중 상속을 허락한다.
  
  // 어차피 인터페이스의 모든 메서드는 구현된 것이 아니기 때문에,
  // 서브 인터페이스으ㅔ서 수퍼 인터페이스의 메서드를 다시 선언하더라도 문제 없다.
  // 다만 부질 없는 짓이다.
  // void m3();
  
  // 다음과 같이 메서드를 추가하는 것은 안된다.
  // 이미 같은 이름을 가지면서 파라미터의 타입도 일치하는 메서드가 있는데
  // 리턴 타입만 달리해서 메서드를 선언하면 
  // 나중에 클래스에서 이 메서드를 구현할 때 구분할 수 없기 때문에 이것은 불가능하다.
  // int m3(); // 컴파일 오류
  
  // 파라미터가 다르면 오버로딩이 가능하기 때문에 괜찮다.
  void m3(int a);
  
  // 파라미터만 다르다면 오버로딩이 가능하기 때문에 괜찮다.
  int m3(int a, int b);
  
  
  void m7();
}
