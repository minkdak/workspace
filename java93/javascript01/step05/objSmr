
var car = {
  x: 0,
  y: 0,
  move: function(nx, ny) {
    this.x +=nx;
    this.y +=ny;
  }
}
1. 용어 정리 및 사용

ㄱ. 속성: 객체안의 변수를 일반 변수와 구분하기 위해 부르는 용어
    x: 0, x라는 변수를 만들고 초기값을 0으로 설정한다)
ㄴ. 메서드: 객체안의 함수를 일반함수와 구분하기 위해 부르는 용어
    move: function(x, y) {} => 일반함수는 function 다음에 함수이름이 나오지만
   메서드는 앞으로 빠져나와있다
ㄷ. 메서드 안에서의 객체 속성은 this.속성으로 표시
    this.x +=nx; -> this는 이 메서드를 담고 있는 객체를 의미하는 특별한 단어이다.
    즉, this = car. 자세한 이유 뒤에.

ㄹ. 객체 호출 : 객체명.속성 or 객체명.메서드
    car.x = 30// car의 속성 x값을 30으로 바꾼다
    car.move = (10, 30) // x값 10, y값 30 증가
    - 객체명.속성 = 객체명['속성']
      car.x = 10  =  car['x'] = 10
ㄷ. 리퍼런스 변수: 객체가 위치한 주소를 가르키는 변수.

2. 위의 객체 실행과정
ㄱ. var car 실행 -> just 변수
ㄴ. {} 까지의 객체 생성(다음 동작까지 진행)
ㄷ. {} 객체 생성후 코드 대신 객체의 주소를 놓아둠.
    쉽게말해 내부적으로 var car = 100번지로 바뀐다.
ㄹ. = 실행
    -  변수 car에 객체의 주소값을 담게됨.
    - "리퍼런스 변수 car가 새로 생긴 객체를 가리키고 있다."
    - 객체가 위치한 주소값을 담고 있는 변수

* 객체 비교時 '==' 연산자 사용 불가
var c1 = {}
var c2 = {}
c1객체의 메모리는 100번지, c2객체의 메모리는 200번지에 있다고 가정.
두 객체의 메모리가 같은 위치에 겹쳐져 있을 수 없으므로 false가 된다.
