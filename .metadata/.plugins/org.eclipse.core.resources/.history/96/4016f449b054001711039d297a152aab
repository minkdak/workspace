package bitcamp.java93.control;
import javax.naming.ldap.Control;
import javax.servlet.RequestDispatcher;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import bitcamp.java93.domain.Member;
import service.TeacherService;


@WebServlet(urlPatterns="/auth/login")
public class LoginControl implements Control {
  
  TeacherService teacherService;
  
  public void setTeacherService(TeacherService teacherService) {
    this.teacherService = teacherService;
  }
  
  @Override
  protected String service(HttpServletRequest req, HttpServletResponse resp) throws Exception {
    
    if (req.getMethod().equals("GET")) {
      return "/auth/form.jsp";
    }
    
  
    String userType = req.getParameter("userType");
    String email = req.getParameter("email");
    String password = req.getParameter("password");
    
    
    try{
      Member member = null; 
      if (userType.equals("teacher")) {
        member = teacherService.getByEmailPassword(email, password);
      }
      if (member != null) { 
        HttpSession session = req.getSession();
        session.setAttribute("loginMember", member);
       
        
        String saveEmail = req.getParameter("saveEmail");
        if (saveEmail != null) { // 이메일 저장을 체크 했다면,
          Cookie cookie2 =new Cookie("email", email);
          cookie2.setMaxAge(60 * 60 * 24 * 7);
          resp.addCookie(cookie2);
        } else {
          Cookie cookie2 = new Cookie("email", "");
          cookie2.setMaxAge(0); // 유효기간이 0이면 즉시 무효화시키라는 뜻! 제거하라는 의미!
          res.addCookie(cookie2);
        }
        
        res.sendRedirect("../teacher/list");
      } else {
        RequestDispatcher rd = req.getRequestDispatcher("/auth/fail.jsp");
        rd.forward(req,res);
      }
      
      
    } catch (Exception e) {
      req.setAttribute("error", e);
      RequestDispatcher rd = req.getRequestDispatcher("/error.jsp");
      rd.forward(req,res);
      return;
    }
    
  }
}
