package minkdak;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.drew.imaging.ImageMetadataReader;
import com.drew.imaging.ImageProcessingException;
import com.drew.metadata.Directory;
import com.drew.metadata.Metadata;
import com.drew.metadata.Tag;
import com.drew.metadata.exif.GpsDescriptor;
import com.drew.metadata.exif.GpsDirectory;

public class DicaMetaData {
  String allTags;
  String latitude;
  public String getTags() {

    try {
        Metadata metadata = ImageMetadataReader.readMetadata(jpegFile);

        for (Directory directory : metadata.getDirectories()) {
            for (Tag allTags : directory.getTags()) {

                System.out.println(allTags);
            }
        }
    } catch (ImageProcessingException ex) {
        Logger.getLogger(MetaData.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IOException ex) {
        Logger.getLogger(MetaData.class.getName()).log(Level.SEVERE, null, ex);
    }
    return allTags;
}

public String getLatitude() {
    try {
        Metadata metadata = ImageMetadataReader.readMetadata(jpegFile);
        if (metadata.containsDirectory(GpsDirectory.class)) {
            GpsDirectory gpsDir = (GpsDirectory) metadata.getDirectory(GpsDirectory.class);
            GpsDescriptor gpsDesc = new GpsDescriptor(gpsDir);
            System.out.println("Latitude: " + gpsDesc.getGpsLatitudeDescription());
        }
    } catch (ImageProcessingException ex) {
        Logger.getLogger(ExtractTags.class.getName()).log(Level.SEVERE, null, ex);
        System.out.println("Error 1");
    } catch (IOException ex) {
        Logger.getLogger(ExtractTags.class.getName()).log(Level.SEVERE, null, ex);
        System.out.println("Error 2");
    }

    return latitude;
}
 public static void main(String [] args) throws ImageProcessingException, IOException{
  
 File file = new File("C:\\Users\\bitcamp\\Downloads\\baseball.jpg");
// file.createNewFile();
 
// FileOutputStream fos = new FileOutputStream(file);
// fos.close();
 
 


  
  Metadata metadata = ImageMetadataReader.readMetadata(file);
  GpsDirectory gpsDir = (GpsDirectory) metadata.getFirstDirectoryOfType(GpsDirectory.class);

  if (gpsDir != null) {
    GpsDescriptor gpsDesc = new GpsDescriptor(gpsDir);
    System.out.println("Latitude: " + gpsDesc.getGpsLatitudeDescription());
}
//  ExifSubIFDDirectory directory1 = metadata.getFirstDirectoryOfType(ExifSubIFDDirectory.class);
//  Date date = directory1.getDate(ExifSubIFDDirectory.TAG_DATETIME_ORIGINAL);
//  GpsDirectory gpsDirectory = (GpsDirectory)metadata.getDirectoriesOfType(GpsDirectory.class);
//  System.out.println("Tag_GPS_ALTITUDE:::" + gpsDirectory.TAG_ALTITUDE);
//  Collection<GpsDirectory> gpsDirectory = metadata.getDirectory(GpsDirectory.class);
  
//  System.out.println("Tag_GPS_ALTITUDE:::" + gpsDirectory.TAG_ALTITUDE);
//  System.out.println("GPS:::"+gpsDirectory.getGeoLocation());
  
    
//디렉토리 생성.
//ExifSubIFDDirectory directory = metadata.getDirectory(ExifSubIFDDirectory.class);
//
////디렉토리의 태그에 해당하는 값을 가져옴.
////이미지생성일시, 촬영기기모델명
//Date originalDate = directory.getDate(ExifSubIFDDirectory.TAG_DATETIME_ORIGINAL);
//String modelName = directory.getString(ExifSubIFDDirectory.TAG_LENS_MODEL);



//
//  for (Directory directory : metadata.getDirectories()) {
//      for (Tag tag : directory.getTags()) {
//          System.out.format("[%s] - %s = %s\n",
//              directory.getName(), tag.getTagName(), tag.getDescription());
//      }
//      if (directory.hasErrors()) {
//          for (String error : directory.getErrors()) {
//              System.err.format("ERROR: %s", error);
//          }
//      }
//  }
//  GpsDirectory gpsDirectory = metadata.getDirectories();
  
 }
    
}